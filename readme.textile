h1. pffft.wasm: an FFT library for the browser

"PFFFT":https://bitbucket.org/jpommier/pffft/src/master/README.md is a small, pretty fast FFT library with a BSD-like license.  This repository make that library available in browsers and Node.js by using "WebAssembly":https://webassembly.org. Two builds are provided a "SIMD":https://v8.dev/features/simd build and on without SIMD which is slower but compatible with more WebAssembly runtimes.

This repository contains:

* @build@ two builds of pffft.wasm one with SIMD one without SIMD instructions.
* @examples@ show how to use PFFFT.WASM
** @browser@ 
*** @visualize.html@ Shows how to calculate an STFT and visualize the result on a Canvas element. Try the "pffft.wasm visualization":https://0110.be/l/pffft_viz 
*** @benchmark.html@ Benchmarks pffft.wasm by analysing a 1024 sample window 100k times. Run the "pffft.wasm benchmark":https://0110.be/l/pffft_benchmark to see the difference between the SIMD and non SIMD version on your system.
** @node@ shows how to call pffft.wasm from a Node.js environment.
* @media@ a couple of screenshots.
* @src@ The slightly modified source code of the original PFFFT library. The modifications change some @ifdefs@ to enable SIMD compilation with emscripten. The runner automatically windows incoming data and exposes the functionality to the WebAssebmy side. 


h2. Why PFFFT.WASM?

PFFFT on WebAssembly provides a high performance, small FFT library which can be used in browsers or on Node.js. It is ideally suited for frequency analysis of lots of data in the browser.

This project also serves as way for me to learn about __SIMD and WebAssembly__. pffft.wasm is one of the more simple projects where SIMD makes an actual difference. See the benchmarks below for more info.


!./media/stft.png(STFT canvas image)!
<small>Fig: An STFT calculated with PFFFT.WASM</small>


h2. Benchmark

To see the difference between the SIMD version and the one without there is a benchmark.  The pure Javascript FFT library "FFT.js":https://github.com/auroranockert/fft.js is used as a baseline. Run the "pffft.wasm benchmark":https://0110.be/l/pffft_benchmark to see it in action on your system.

!./media/pffft_benchmark.png(PFFFT benchmark)!
<small>Fig: benchmarks on an Apple M1 Pro Chip.</small>


h2. Limitations

The wrapper __limits window sizes__ to 512 or 1024 samples and __applies a Hamming window__ automatically. If other window sizes or types are needed a change to the wrapper followed by recompilation is needed. Also, the audio samples are expected to be 32bit floats.

To use WebAssembly modules in browsers "CORS":https://en.wikipedia.org/wiki/Cross-origin_resource_sharing needs to be configured correctly on your web server. A working configuration sets these headers: <tt>'Cross-Origin-Embedder-Policy' => 'require-corp'</tt> and <tt>'Cross-Origin-Opener-Policy' => 'same-origin'</tt>. This makes it less easy to install than pure Javascript libraries. Pure Javascript FFT libraries are already quite fast and sufficient for many applications, do consider these before resorting to PFFFT.WASM.  

Evidently, to use the SIMD version a WebAssembly runtime is needed that supports these instructions.


h2. Credits

* "PFFFT":https://bitbucket.org/jpommier/pffft/src/default/  a pretty fast FFT library. BSD license
* "Emscripten":https://emscripten.org/ compiles c code to WebAssembly.
* "Chart.js":https://www.chartjs.org/ the charting library used for the benchmarking. 

pffft.wasm by Joren Six at IPEM, Ghent University.